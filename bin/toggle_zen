#!/usr/bin/env node

const { execSync, exec } = require("child_process");
const fs = require("fs");
const { resolve } = require("path");

const main = () => {
  const kittyConfig = new KittyConfig("~/.config/kitty/kitty.conf");
  const vimController = new VimController();
  const tmuxController = new TmuxController();

  const currentFont = kittyConfig.getFontFamily();
  const isZenMode = currentFont === "Writer";

  if (isZenMode) {
    vimController.disableZenMode();
    kittyConfig.setFontFamily("FiraCode Nerd Font");
    kittyConfig.setFontSize(13);
    tmuxController.showStatus();
    tmuxController.restoreCurrentPane();
  } else {
    vimController.enableZenMode();
    kittyConfig.setFontFamily("Writer");
    kittyConfig.setFontSize(16);
    tmuxController.hideStatus();
    tmuxController.maximizeCurrentPane();
  }

  kittyConfig.save();
  kittyConfig.reloadConfig();
};

class KittyConfig {
  #config;
  get configLines() {
    return this.#config.split("\n");
  }

  constructor(path) {
    this.path = path
      .split("~/")
      .map((chunk) => (!chunk ? process.env.HOME : chunk));
    this.#config = String(fs.readFileSync(resolve(...this.path)));
  }

  save() {
    fs.writeFileSync(resolve(...this.path), this.#config);
  }

  reloadConfig() {
    execSync("kitty @ load-config");
  }

  debug() {
    console.log(this.#config);
  }

  findLine(chunk) {
    const index = this.configLines.findIndex(
      (line) => line.indexOf(chunk) === 0,
    );
    return [index, this.configLines[index]];
  }

  setFontSize(size) {
    const [index] = this.findLine("font_size");
    this.#config = [
      ...this.configLines.slice(0, index),
      `font_size ${size}`,
      ...this.configLines.slice(index + 1),
    ].join("\n");
  }

  getFontFamily() {
    const [index, line] = this.findLine("font_family");

    return line.replace("font_family", "").trim();
  }

  setFontFamily(ff) {
    const [index] = this.findLine("font_family");
    this.#config = [
      ...this.configLines.slice(0, index),
      `font_family ${ff}`,
      ...this.configLines.slice(index + 1),
    ].join("\n");
  }
}

class VimController {
  #sockets;
  constructor() {
    this.#sockets = this.#getAllSockets();
  }
  #getAllSockets() {
    const socketsFolder = resolve(process.env.HOME, ".cache/nvim");
    const allVimSockets = fs
      .readdirSync(socketsFolder)
      .filter((file) => file.indexOf("server_") === 0 && file.endsWith(".pipe"))
      .map((file) => resolve(socketsFolder, file));

    return allVimSockets;
  }

  #exec(command) {
    this.#sockets.forEach((socket) => {
      exec([`nvim --server ${socket} --remote-send`, command].join(" "));
    });
  }

  setTheme(theme) {
    this.#exec(
      [
        `":lua vim.g.nvchad_theme = '${theme}';`,
        `require(\\"base46\\").load_all_highlights();`,
        `vim.api.nvim_exec_autocmds(\\"User\\", { pattern = \\"NvChadThemeReload\\" })<CR>:<esc>"`,
      ].join(" "),
    );
  }

  enableZenMode() {
    this.#exec(`":lua require(\\"zen-mode\\").open()<cr>:<esc>"`);
  }

  disableZenMode() {
    this.#exec(`":lua require(\\"zen-mode\\").close()<cr>:<esc>"`);
  }
}

class TmuxController {
  showStatus() {
    exec("tmux set status on");
  }

  hideStatus() {
    exec("tmux set status off");
  }

  maximizeCurrentPane() {
    exec("tmux list-panes -F '#F' | grep -q Z || tmux resize-pane -Z");
  }

  restoreCurrentPane() {
    exec("tmux list-panes -F '#F' | grep -q Z && tmux resize-pane -Z");
  }
}

main();
